target_steps_std: &target_steps_std
  docker:
    # NOTE: Exact version is overridden in `rust-toolchain.toml`
    - image: cimg/rust:1.72
  steps:
    - checkout
    - restore_cache:
        key: v7-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}

    # For docs gen
    - run: rustup target add x86_64-unknown-linux-gnu || true
    - run: |
        binaries=( "cargo-deadlinks" "cargo-readme" "just" )

        for binary in "${binaries[@]}"
        do
          echo "Checking for $binary"
          if ! type "$binary" > /dev/null; then
            echo "--> $binary is not installed. Installing..."
            cargo install "$binary" --target x86_64-unknown-linux-gnu
          else
            echo "--> $binary already installed"
          fi
        done

    - run: rustup target add $TARGET || true
    - run: cargo fmt --all -- --check
    - run: just check-readmes
    - run: cargo test --features '__internals' --target $TARGET --workspace
    - run: cargo bench --workspace --no-run --target $TARGET
    - run: cargo build --target $TARGET --examples --release
    - run: cargo build --target $TARGET --no-default-features
    - run: cargo deadlinks --ignore-fragments

    - save_cache:
        key: v7-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
        paths:
          - ./target
          - /home/circleci/.cargo/registry
          - /home/circleci/.cargo/bin

miri_steps: &miri_steps
  docker:
    # NOTE: Exact version is overridden in `rust-toolchain.toml`
    - image: cimg/rust:1.72
  steps:
    - checkout
    - run: sudo apt update && sudo apt install -y libpcap-dev
    - restore_cache:
        key: v5-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}

    # Arbitrary nightly version - just the latest at time of writing. This can be changed freely.
    - run: rustup toolchain add nightly-2023-12-25 --target $TARGET --component miri
    - run: |
        export MIRIFLAGS="-Zmiri-symbolic-alignment-check -Zmiri-disable-isolation"

        cargo +nightly-2023-12-25 miri test --features '__internals' --target $TARGET

    - save_cache:
        key: v5-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
        paths:
          - ./target
          - /home/circleci/.cargo/registry

target_steps_no_std: &target_steps_no_std
  docker:
    # NOTE: Exact version is overridden in `rust-toolchain.toml`
    - image: cimg/rust:1.72
  steps:
    - checkout
    - restore_cache:
        key: v5-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}

    - run: rustup target add $TARGET || true
    - run: cargo build --target $TARGET --no-default-features --release
    - run: cargo build --target $TARGET --no-default-features --release --features defmt

    - save_cache:
        key: v5-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
        paths:
          - ./target
          - /home/circleci/.cargo/registry

target_steps_embassy: &target_steps_embassy
  docker:
    # NOTE: Exact version is overridden in `rust-toolchain.toml`
    - image: cimg/rust:1.72
  steps:
    - checkout
    - restore_cache:
        key: v5-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
    - run: |
        cd examples/embassy-stm32

        cargo build --release

    - save_cache:
        key: v5-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
        paths:
          - ./target
          - /home/circleci/.cargo/registry

macos_steps: &macos_steps
  resource_class: large
  docker:
    # NOTE: Exact version is overridden in `rust-toolchain.toml`
    - image: cimg/rust:1.72
  steps:
    - checkout
    - restore_cache:
        key: v4-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}

    - run: rustup target add $TARGET
    - run: cargo check --target $TARGET --release --examples

    - save_cache:
        key: v4-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
        paths:
          - ./target
          - /home/circleci/.cargo/registry

version: 2
jobs:
  target-x86_64-unknown-linux-gnu:
    resource_class: large
    environment:
      - TARGET: "x86_64-unknown-linux-gnu"
    <<: *target_steps_std

  target-x86_64-unknown-linux-musl:
    resource_class: large
    environment:
      - TARGET: "x86_64-unknown-linux-musl"
    <<: *target_steps_std

  miri-x86_64-unknown-linux-gnu:
    resource_class: large
    environment:
      - TARGET: "x86_64-unknown-linux-gnu"
    <<: *miri_steps

  windows-cross:
    environment:
      - TARGET: "x86_64-pc-windows-gnu"
    resource_class: large
    docker:
      # NOTE: Exact version is overridden in `rust-toolchain.toml`
      - image: cimg/rust:1.72
    steps:
      - checkout
      - restore_cache:
          key: v4-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}

      - run: rustup target add $TARGET
      # For Windows
      - run: sudo apt update && sudo apt install -y mingw-w64
      # FIXME: change to "build" when possible. Currently fails with a link error about "-lPacket"
      # for libpcap on Windows. A bit of a dead end here: https://github.com/libpnet/libpnet/issues/479
      - run: cargo check --target $TARGET --release --examples

      - save_cache:
          key: v4-ethercrab-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
          paths:
            - ./target
            - /home/circleci/.cargo/registry

  macos-cross:
    environment:
      - TARGET: "x86_64-apple-darwin"
    <<: *macos_steps

  macos-arm-cross:
    environment:
      - TARGET: "aarch64-apple-darwin"
    <<: *macos_steps

  target-thumbv7m-none-eabi:
    resource_class: large
    environment:
      - TARGET: "thumbv7m-none-eabi"
    <<: *target_steps_no_std

  target-embassy:
    resource_class: large
    <<: *target_steps_embassy

build_jobs: &build_jobs
  jobs:
    - target-x86_64-unknown-linux-gnu
    - target-x86_64-unknown-linux-musl
    - miri-x86_64-unknown-linux-gnu
    - windows-cross
    - macos-cross
    - macos-arm-cross
    - target-thumbv7m-none-eabi
    - target-embassy

workflows:
  version: 2
  build_all:
    <<: *build_jobs
